---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  labels:
    app: loki
    app.kubernetes.io/component: core
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app: loki
      app.kubernetes.io/component: core
  serviceName: loki-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: loki
        app.kubernetes.io/component: core
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: loki
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: loki
          image: grafana/loki:2.2.1
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
            - "-memberlist.join=loki-headless.logging.svc.cluster.local"
          volumeMounts:
            - name: config
              mountPath: "/etc/loki"
            - name: data
              mountPath: "/loki"
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: gossip
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: config
          configMap:
            name: loki-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-compactor
  labels:
    app: loki
    app.kubernetes.io/component: compactor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
      app.kubernetes.io/component: compactor
  template:
    metadata:
      labels:
        app: loki
        app.kubernetes.io/component: compactor
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: loki
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: loki
          image: grafana/loki:2.2.1
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.file=/etc/loki/loki.yaml"
            - "-boltdb.shipper.compactor.shared-store=s3"
            # Directory where files can be downloaded for compaction.
            - "-boltdb.shipper.compactor.working-directory=/loki/compactor"
            - "-boltdb.shipper.compactor.compaction-interval=5m"
          volumeMounts:
            - name: config
              mountPath: "/etc/loki"
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: config
          configMap:
            name: loki-config
---
# open loki endpoint for incoming promtail and prometheus requests
apiVersion: v1
kind: Service
metadata:
  name: loki-headless
  labels:
    app: loki
spec:
  clusterIP: None
  ports:
    - port: 3100
      protocol: TCP
      name: push
      targetPort: 3100
    - port: 7946
      protocol: TCP
      name: gossip
      targetPort: 7946
  selector:
    app: loki
    app.kubernetes.io/component: core
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  labels:
    app: loki
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3100"
spec:
  type: ClusterIP
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
