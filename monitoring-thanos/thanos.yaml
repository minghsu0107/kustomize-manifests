---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus-core
  labels:
    app: prometheus
    thanos: sidecar
    app.kubernetes.io/component: core
spec:
  serviceName: thanos-store-gateway
  replicas: 2
  selector:
    matchLabels:
      app: prometheus
      thanos: sidecar
      app.kubernetes.io/component: core
  template:
    metadata:
      name: prometheus-main
      labels:
        app: prometheus
        thanos: sidecar
        app.kubernetes.io/component: core
        thanos-store-api: "true"
    spec:
      serviceAccountName: prometheus-k8s
      initContainers:
      - name: fix-permissions
        image: busybox:1.34.1
        # Prometheus needs a user (noody) that has 65534 user ID
        command: ["sh", "-c", "chown -R 65534:65534 /prometheus/data"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: prometheus-data
          mountPath: /prometheus/data
      # an alternative to fixing permissions in init container
      securityContext:
        fsGroup: 65534
        supplementalGroups:
          - 0
      containers:
      - name: prometheus
        image: prom/prometheus:v2.25.2
        args:
          - "--storage.tsdb.path=/prometheus/data"
          - "--storage.tsdb.retention.time=3d"
          - "--storage.tsdb.min-block-duration=2h"
          - "--storage.tsdb.max-block-duration=2h"
          # - "--storage.tsdb.no-lockfile"
          - "--web.enable-lifecycle"
          - '--config.file=/etc/prometheus-shared/prometheus.yaml'
        ports:
        - name: webui
          containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: rules-volume
          mountPath: /etc/prometheus-rules
        - name: prometheus-data
          mountPath: /prometheus/data
        - name: prometheus-config-shared
          mountPath: /etc/prometheus-shared
      - name: thanos
        image: thanosio/thanos:main-2021-04-15-2a999d25
        args:
          - "sidecar"
          - |
            --objstore.config=type: S3
            config:
              bucket: "$(STORE_BUCKET)"
              endpoint: "$(ENDPOINT)"
              access_key: "$(AWS_ACCESS_KEY_ID)"
              secret_key: "$(AWS_SECRET_KEY)"
              insecure: $(INSECURE)
          - "--log.level=debug"
          - "--tsdb.path=/prometheus/data"
          - "--prometheus.url=http://127.0.0.1:9090"
          - "--reloader.rule-dir=/etc/prometheus-rules/"
          - "--reloader.config-file=/etc/prometheus/prometheus.yaml"
          - "--reloader.config-envsubst-file=/etc/prometheus-shared/prometheus.yaml"
        envFrom:
          - configMapRef:
              name: s3-config
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                name: cluster-config
                key: cluster_name
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: s3-secret
                key: accesskey
          - name: AWS_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: s3-secret
                key: secretkey
        ports:
          - name: http-sidecar
            containerPort: 10902
          - name: grpc
            containerPort: 10901
        livenessProbe:
            httpGet:
              port: 10902
              path: /-/healthy
        readinessProbe:
          httpGet:
            port: 10902
            path: /-/ready
        volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus
          - name: rules-volume
            mountPath: /etc/prometheus-rules
          - name: prometheus-data
            mountPath: /prometheus/data
          - name: prometheus-config-shared
            mountPath: /etc/prometheus-shared
      - name: configmap-reload
        image: "jimmidyson/configmap-reload:v0.4.0"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        args:
          - --volume-dir=/etc/prometheus-shared
          - --webhook-url=http://localhost:9090/-/reload
        volumeMounts:
          - mountPath: /etc/prometheus-shared
            name: prometheus-config-shared
            readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-core
      - name: prometheus-config-shared
        emptyDir: {}
      - name: rules-volume
        configMap:
          name: prometheus-rules
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-querier
  labels:
    app: thanos-querier
spec:
  replicas: 2
  selector:
    matchLabels:
      app: thanos-querier
  template:
    metadata:
      labels:
        app: thanos-querier
    spec:
      containers:
      - name: thanos
        image: thanosio/thanos:main-2021-04-15-2a999d25
        args:
        - query
        - --log.level=debug
        - --query.replica-label=replica
        - --store=dnssrv+thanos-store-gateway:10901
        ports:
        - name: http
          containerPort: 10902
        - name: grpc
          containerPort: 10901
        livenessProbe:
          httpGet:
            port: http
            path: /-/healthy
        readinessProbe:
          httpGet:
            port: http
            path: /-/ready
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-store-gateway
  labels:
    app: thanos-store-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thanos-store-gateway
  serviceName: thanos-store-gateway
  template:
    metadata:
      labels:
        app: thanos-store-gateway
        thanos-store-api: "true"
    spec:
      containers:
        - name: thanos
          image: thanosio/thanos:main-2021-04-15-2a999d25
          args:
          - "store"
          - "--log.level=debug"
          - "--data-dir=/data"
          - |
            --objstore.config=type: S3
            config:
              bucket: "$(STORE_BUCKET)"
              endpoint: "$(ENDPOINT)"
              access_key: "$(AWS_ACCESS_KEY_ID)"
              secret_key: "$(AWS_SECRET_KEY)"
              insecure: $(INSECURE)
          - "--index-cache-size=500MB"
          - "--chunk-pool-size=500MB"
          envFrom:
            - configMapRef:
                name: s3-config
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: s3-secret
                key: accesskey
          - name: AWS_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: s3-secret
                key: secretkey
          ports:
          - name: http
            containerPort: 10902
          - name: grpc
            containerPort: 10901
          livenessProbe:
            httpGet:
              port: 10902
              path: /-/healthy
          readinessProbe:
            httpGet:
              port: 10902
              path: /-/ready
          volumeMounts:
          - name: thanos-store-data
            mountPath: /data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-compactor
  labels:
    app: thanos-compactor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thanos-compactor
  serviceName: thanos-compactor
  template:
    metadata:
      labels:
        app: thanos-compactor
    spec:
      containers:
      - name: thanos
        image: thanosio/thanos:main-2021-04-15-2a999d25
        args:
          - "compact"
          - "--log.level=debug"
          - "--data-dir=/tmp/thanos-compact"
          - |
            --objstore.config=type: S3
            config:
              bucket: "$(STORE_BUCKET)"
              endpoint: "$(ENDPOINT)"
              access_key: "$(AWS_ACCESS_KEY_ID)"
              secret_key: "$(AWS_SECRET_KEY)"
              insecure: $(INSECURE)
          - "--wait"
          - "--wait-interval=5m"
        envFrom:
          - configMapRef:
              name: s3-config
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: s3-secret
                key: accesskey
          - name: AWS_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: s3-secret
                key: secretkey
        ports:
          - name: http
            containerPort: 10902
        livenessProbe:
          httpGet:
            port: 10902
            path: /-/healthy
        readinessProbe:
          httpGet:
            port: 10902
            path: /-/ready
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: thanos-ruler
  name: thanos-ruler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thanos-ruler
  serviceName: thanos-ruler
  template:
    metadata:
      labels:
        app: thanos-ruler
        thanos-store-api: "true"
    spec:
      containers:
        - name: thanos
          image: thanosio/thanos:main-2021-04-15-2a999d25
          args:
            - rule
            - --log.level=debug
            - --data-dir=/data
            - --eval-interval=20s
            - --rule-file=/etc/thanos-ruler/*.rules.yaml
            - --alertmanagers.url=http://alertmanager:9093
            - --query=thanos-querier:10902
            - |
              --objstore.config=type: S3
              config:
                bucket: "$(RULE_BUCKET)"
                endpoint: "$(ENDPOINT)"
                access_key: "$(AWS_ACCESS_KEY_ID)"
                secret_key: "$(AWS_SECRET_KEY)"
                insecure: $(INSECURE)
            - --label=ruler_cluster="$(CLUSTER_NAME)"
            - --label=replica="$(POD_NAME)"
          envFrom:
            - configMapRef:
                name: s3-config
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-config
                  key: cluster_name
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: accesskey
            - name: AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: secretkey
          ports:
            - name: http
              containerPort: 10902
            - name: grpc
              containerPort: 10901
          livenessProbe:
            httpGet:
              port: http
              path: /-/healthy
          readinessProbe:
            httpGet:
              port: http
              path: /-/ready
          volumeMounts:
            - mountPath: /etc/thanos-ruler
              name: config
      volumes:
        - configMap:
            name: thanos-ruler-rules
          name: config
